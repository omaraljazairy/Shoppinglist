/**
 * This the User object. When the user signs in through firebase,
 * an Auth object will be returned that will contain all the user info.
 * This object will store them.
 * @author Omar Aljazairy
 * @version 1.2
 * @public
 */

class User {
  /**
   * @param {string} firebaseUid - the uid generated by firebase and not the provider.
   * @param {string=} providerToken - not firebase token but social media (facebook, google, etc ..)
   * @param {string} username - username used for login.
   * @param {number} lastLoggedIn - user's lastlogged in datetime.
   * @param {number} creationTime - user creation on the app datetime
   * @param {number} expireTime - user account expire datetime.
   * @param {string} providerId - sign provider like Google, Facebook, Email, ...
   * @param {string} providerUid - provider uid.
   * @param {string} displayName - firebase displayname.
   * @param {string=} email - optional, default value is null.
   * @param {string=} gender - optional value, default value is null.
   * @param {string=} imageUrl - optional value, default value is null.
   * @param {number=} imageHeight - optional value, default value is 120.
   * @param {number=} imageWidth - optional value, default value is 120.
   */
  constructor(
    firebaseUid,
    providerToken = null,
    username,
    lastLoggedIn,
    creationTime,
    expireTime,
    providerId,
    providerUid,
    displayName,
    email = null,
    gender = null,
    photoURL = null,
    imageHeight = 200,
    imageWidth = 200,
  ) {
    this.firebaseUid = firebaseUid;
    this.providerToken = providerToken;
    this.username = username;
    this.providerId = providerId;
    this.providerUid = providerUid;
    this.lastLoggedIn = lastLoggedIn;
    this.creationTime = creationTime;
    this.expireTime = expireTime;
    this.profile = {
      displayName: displayName,
      email: email,
      gender: gender,
      photoURL: photoURL,
      imageHeight: imageHeight,
      imageWidth: imageWidth,
    };
  }
  /**
   * converts the firebase JSON AuthUser object to a User Object
   * @param {JSON} firebaseUserDate - the user object returned from firebase.
   * @param {string} accessToken - required for third party logins like facebook and google.
   * @returns Credentials Object.
   * @public
   */
  static createUser(firebaseUserDate, providerAccessToken) {
    const profile = firebaseUserDate.additionalUserInfo.profile || null;
    const userProvider = firebaseUserDate.user;
    const userPicture = __getPicture(
      firebaseUserDate.additionalUserInfo.providerId,
      profile,
      userProvider,
    );
    console.log('======================================');
    console.log('user profile in user Object: ', profile);
    console.log('--------------------------------------');
    console.log('user in userObject', userProvider);
    console.log('--------------------------------------');
    console.log('picture in userObject', userPicture);
    console.log('======================================');
    const firebaseUid = userProvider.uid;
    const providerToken = providerAccessToken;
    const username = __getEmail(
      firebaseUserDate.additionalUserInfo.providerId,
      profile,
      userProvider,
    );
    const expireTime = profile ? profile.exp : null;
    const lastLoggedIn = userProvider.metadata.lastSignInTime;
    const creationTime = userProvider.metadata.creationTime;
    const providerId = firebaseUserDate.additionalUserInfo.providerId;
    const providerUid = __getProviderUID(
      firebaseUserDate.additionalUserInfo.providerId,
      profile,
    );
    const displayName = userProvider.displayName
      ? userProvider.displayName
      : username;
    const email = __getEmail(
      firebaseUserDate.additionalUserInfo.providerId,
      profile,
      userProvider,
    );
    const gender = null;
    const photoURL = userPicture.url;
    const imageHeight = userPicture.height;
    const imageWidth = userPicture.width;

    const user = new User(
      firebaseUid,
      providerToken,
      username,
      lastLoggedIn,
      creationTime,
      expireTime,
      providerId,
      providerUid,
      displayName,
      email,
      gender,
      photoURL,
      imageHeight,
      imageWidth,
    );
    // console.log('created user data object: ', user);
    return user;
  }
}

/**
 * because every provider has its own attribute name for the userid,
 * this function returns based on the provider the userid
 * @param {string} providerId - example: google.com | facebook.com | apple.com
 * @param {object} profile - object profile received from providers
 * @return string represents the userid or null.
 */
function __getProviderUID(providerId, profile) {
  console.log('profile received: ', profile);
  console.log('providerId: ', providerId);
  switch (providerId) {
    case 'apple.com':
      return profile.nonce;
    case 'facebook.com':
      return profile.id;
    case 'google.com':
      return profile.sub;
    default:
      return null;
  }
}

/**
 * because the picture url is different per provider, this function
 * takes the provider and returns back a picture object.
 * @param {string} providerId - example: google.com | facebook.com | apple.com
 * @param {object} profile - object profile received from providers
 * @param {object} userProvider - user object from the firebase user
 * @return object with url, width and height attributes.
 */
function __getPicture(providerId, profile, userProvider) {
  switch (providerId) {
    case 'apple.com':
      return {url: userProvider.photoURL, width: 200, height: 200};
    case 'facebook.com':
      return {
        url: profile.picture.data.url,
        width: profile.picture.data.width,
        height: profile.picture.data.height,
      };
    case 'google.com':
      return {url: profile.picture, width: 200, height: 200};
    case 'password':
      return {url: userProvider.photoURL, width: 200, height: 200};
    default:
      return {url: null, width: null, height: null};
  }
}

/**
 * because ever provider uses a different attribute for the email,
 * this function will return the email based on the provider.
 * @param {string} providerId - example: google.com | facebook.com | apple.com
 * @param {object} profile - object profile received from providers
 * @param {object} userProvider - user object from the firebase user
 * return email string or null
 */
function __getEmail(providerId, profile, userProvider) {
  switch (providerId) {
    case 'apple.com':
      return userProvider.email;
    case 'facebook.com':
      return userProvider.email;
    case 'google.com':
      return profile.email;
    case 'password':
      return userProvider.email;
    default:
      return null;
  }
}

export default User;
